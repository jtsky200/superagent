# üöÄ CADILLAC EV CIS - Production Docker Compose Configuration
# Optimized for Swiss market with high availability and performance

version: '3.8'

services:
  # üóÑÔ∏è PostgreSQL Database with Swiss optimization
  postgres:
    image: postgres:15-alpine
    container_name: cadillac-ev-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-cadillac_ev_cis}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--locale=de_CH.UTF-8 --encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./monitoring/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - cadillac-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # üöÄ Redis Cache with persistence
  redis:
    image: redis:7-alpine
    container_name: cadillac-ev-redis-prod
    restart: unless-stopped
    command: >
      redis-server 
      --save 900 1 
      --save 300 10 
      --save 60 10000
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - cadillac-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # üèóÔ∏è Backend API Service
  backend:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile.backend
    image: cadillac-ev-cis/backend:latest
    container_name: cadillac-ev-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-cadillac_ev_cis}
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-15m}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      LOG_LEVEL: info
      ENABLE_SWAGGER: false
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX: 100
    ports:
      - "127.0.0.1:3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cadillac-network
    volumes:
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # üé® Frontend Application
  frontend:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile.frontend
    image: cadillac-ev-cis/frontend:latest
    container_name: cadillac-ev-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
      NEXT_TELEMETRY_DISABLED: 1
      API_BASE_URL: http://backend:3001
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - cadillac-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # ü§ñ AI Services
  ai-services:
    build:
      context: ../..
      dockerfile: docker/production/Dockerfile.ai-services
    image: cadillac-ev-cis/ai-services:latest
    container_name: cadillac-ev-ai-prod
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      FLASK_DEBUG: False
      LOG_LEVEL: INFO
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SERPER_API_KEY: ${SERPER_API_KEY}
      FIRECRAWL_API_KEY: ${FIRECRAWL_API_KEY}
      QDRANT_URL: ${QDRANT_URL}
      QDRANT_API_KEY: ${QDRANT_API_KEY}
    ports:
      - "127.0.0.1:5000:5000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - cadillac-network
    volumes:
      - ai_logs:/app/logs
      - ai_cache:/app/cache
      - ai_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # üîÑ Nginx Reverse Proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: cadillac-ev-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - ai-services
    networks:
      - cadillac-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # üìä Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: cadillac-ev-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - cadillac-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # üìà Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: cadillac-ev-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-localhost}
      GF_SMTP_ENABLED: true
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
      GF_SMTP_FROM_ADDRESS: monitoring@cadillac-ev-cis.ch
    ports:
      - "127.0.0.1:3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - cadillac-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # üìä Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: cadillac-ev-node-exporter-prod
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "127.0.0.1:9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - cadillac-network

# üåê Networks
networks:
  cadillac-network:
    driver: bridge
    name: cadillac-ev-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

# üíæ Persistent Volumes
volumes:
  postgres_data:
    driver: local
    name: cadillac-ev-postgres-data
  redis_data:
    driver: local
    name: cadillac-ev-redis-data
  backend_logs:
    driver: local
    name: cadillac-ev-backend-logs
  ai_logs:
    driver: local
    name: cadillac-ev-ai-logs
  ai_cache:
    driver: local
    name: cadillac-ev-ai-cache
  ai_models:
    driver: local
    name: cadillac-ev-ai-models
  nginx_logs:
    driver: local
    name: cadillac-ev-nginx-logs
  prometheus_data:
    driver: local
    name: cadillac-ev-prometheus-data
  grafana_data:
    driver: local
    name: cadillac-ev-grafana-data