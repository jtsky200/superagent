# üîê CADILLAC EV CIS - Production Secrets Template
# Note: This is a template. Actual secrets should be created using kubectl or external secret management

apiVersion: v1
kind: Secret
metadata:
  name: cadillac-ev-secrets
  namespace: cadillac-ev-production
  labels:
    app.kubernetes.io/name: cadillac-ev-cis
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Database Secrets
  DB_USERNAME: "${DB_USERNAME}"
  DB_PASSWORD: "${DB_PASSWORD}"
  
  # JWT Secrets
  JWT_SECRET: "${JWT_SECRET}"
  JWT_REFRESH_SECRET: "${JWT_REFRESH_SECRET}"
  
  # External API Keys
  OPENAI_API_KEY: "${OPENAI_API_KEY}"
  DEEPSEEK_API_KEY: "${DEEPSEEK_API_KEY}"
  GEMINI_API_KEY: "${GEMINI_API_KEY}"
  SERPER_API_KEY: "${SERPER_API_KEY}"
  FIRECRAWL_API_KEY: "${FIRECRAWL_API_KEY}"
  QDRANT_API_KEY: "${QDRANT_API_KEY}"
  
  # Swiss API Keys
  HANDELSREGISTER_API_KEY: "${HANDELSREGISTER_API_KEY}"
  ZEK_API_KEY: "${ZEK_API_KEY}"
  
  # Email/SMTP Configuration
  SMTP_HOST: "${SMTP_HOST}"
  SMTP_USER: "${SMTP_USER}"
  SMTP_PASSWORD: "${SMTP_PASSWORD}"
  
  # Monitoring Secrets
  GRAFANA_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
  PROMETHEUS_PASSWORD: "${PROMETHEUS_PASSWORD}"

---
# SSL/TLS Certificates for Swiss Domain
apiVersion: v1
kind: Secret
metadata:
  name: cadillac-ev-tls
  namespace: cadillac-ev-production
  labels:
    app.kubernetes.io/name: cadillac-ev-cis
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  tls.crt: "${TLS_CERTIFICATE_BASE64}"
  tls.key: "${TLS_PRIVATE_KEY_BASE64}"

---
# Swiss Compliance Secrets
apiVersion: v1
kind: Secret
metadata:
  name: swiss-compliance-secrets
  namespace: cadillac-ev-production
  labels:
    app.kubernetes.io/name: cadillac-ev-cis
    app.kubernetes.io/component: compliance
type: Opaque
stringData:
  # Data Protection Officer Contact
  DPO_EMAIL: "datenschutz@cadillac-ev-cis.ch"
  DPO_PHONE: "+41 44 123 45 67"
  
  # Swiss Authority Contacts
  EDOEB_CONTACT: "contact@edoeb.admin.ch"
  
  # Encryption Keys for Swiss Data
  SWISS_DATA_ENCRYPTION_KEY: "${SWISS_DATA_ENCRYPTION_KEY}"
  SWISS_BACKUP_ENCRYPTION_KEY: "${SWISS_BACKUP_ENCRYPTION_KEY}"

---
# External Service Secrets
apiVersion: v1
kind: Secret
metadata:
  name: external-services-secrets
  namespace: cadillac-ev-production
  labels:
    app.kubernetes.io/name: cadillac-ev-cis
    app.kubernetes.io/component: external-services
type: Opaque
stringData:
  # AWS Secrets for Swiss Region
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  AWS_REGION: "eu-central-1"
  
  # Qdrant Vector Database
  QDRANT_URL: "${QDRANT_URL}"
  QDRANT_API_KEY: "${QDRANT_API_KEY}"
  
  # Monitoring and Alerting
  SLACK_WEBHOOK_URL: "${SLACK_WEBHOOK_URL}"
  PAGERDUTY_INTEGRATION_KEY: "${PAGERDUTY_INTEGRATION_KEY}"
  
  # Swiss Banking APIs (if applicable)
  SWISS_BANKING_API_KEY: "${SWISS_BANKING_API_KEY}"
  SWISS_BANKING_CERT: "${SWISS_BANKING_CERT}"

---
# Image Pull Secrets for Private Registry
apiVersion: v1
kind: Secret
metadata:
  name: cadillac-ev-registry-secret
  namespace: cadillac-ev-production
  labels:
    app.kubernetes.io/name: cadillac-ev-cis
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: "${DOCKER_CONFIG_JSON_BASE64}"

---
# OAuth/OIDC Secrets for Swiss Identity Providers
apiVersion: v1
kind: Secret
metadata:
  name: swiss-identity-secrets
  namespace: cadillac-ev-production
  labels:
    app.kubernetes.io/name: cadillac-ev-cis
    app.kubernetes.io/component: identity
type: Opaque
stringData:
  # Swiss Government eID Integration
  SWISS_EID_CLIENT_ID: "${SWISS_EID_CLIENT_ID}"
  SWISS_EID_CLIENT_SECRET: "${SWISS_EID_CLIENT_SECRET}"
  
  # Corporate Identity Providers
  AZURE_AD_CLIENT_ID: "${AZURE_AD_CLIENT_ID}"
  AZURE_AD_CLIENT_SECRET: "${AZURE_AD_CLIENT_SECRET}"
  AZURE_AD_TENANT_ID: "${AZURE_AD_TENANT_ID}"
  
  # Social Login (if enabled)
  GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID}"
  GOOGLE_CLIENT_SECRET: "${GOOGLE_CLIENT_SECRET}"

---
# Instructions for Secret Management
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-management-instructions
  namespace: cadillac-ev-production
  labels:
    app.kubernetes.io/name: cadillac-ev-cis
    app.kubernetes.io/component: documentation
data:
  README.md: |
    # CADILLAC EV CIS - Secret Management
    
    ## üîê Production Secret Management for Swiss Compliance
    
    ### Required Secrets
    
    1. **Database Secrets**
       - DB_USERNAME: PostgreSQL username
       - DB_PASSWORD: Strong password (min 20 chars, alphanumeric + symbols)
    
    2. **JWT Secrets**
       - JWT_SECRET: 256-bit secret for access tokens
       - JWT_REFRESH_SECRET: 256-bit secret for refresh tokens
    
    3. **AI Service API Keys**
       - OPENAI_API_KEY: OpenAI API key with GPT-4 access
       - DEEPSEEK_API_KEY: DeepSeek API key for fallback
       - GEMINI_API_KEY: Google Gemini API key
       - SERPER_API_KEY: Serper search API key
       - FIRECRAWL_API_KEY: Firecrawl web scraping API key
       - QDRANT_API_KEY: Qdrant vector database API key
    
    4. **Swiss API Keys**
       - HANDELSREGISTER_API_KEY: Swiss commercial register API
       - ZEK_API_KEY: ZEK credit bureau API key
    
    5. **SSL/TLS Certificates**
       - Must be valid for cadillac-ev-cis.ch
       - Include intermediate certificates
       - Min 2048-bit RSA or 256-bit ECDSA
    
    ### Secret Creation Commands
    
    ```bash
    # Create database secret
    kubectl create secret generic cadillac-ev-secrets \
      --from-literal=DB_USERNAME='cadillac_user' \
      --from-literal=DB_PASSWORD='super_secure_password_2024!' \
      --namespace=cadillac-ev-production
    
    # Create TLS secret from files
    kubectl create secret tls cadillac-ev-tls \
      --cert=cadillac-ev-cis.crt \
      --key=cadillac-ev-cis.key \
      --namespace=cadillac-ev-production
    
    # Create registry secret
    kubectl create secret docker-registry cadillac-ev-registry-secret \
      --docker-server=ghcr.io \
      --docker-username=username \
      --docker-password=personal_access_token \
      --namespace=cadillac-ev-production
    ```
    
    ### Swiss Compliance Requirements
    
    1. **Data Encryption**: All secrets must be encrypted at rest
    2. **Access Control**: RBAC must limit secret access
    3. **Audit Logging**: Secret access must be logged
    4. **Rotation**: Secrets must be rotated every 90 days
    5. **Backup**: Encrypted backups stored in Swiss data centers
    
    ### External Secret Management
    
    For production, consider using:
    - AWS Secrets Manager (eu-central-1)
    - HashiCorp Vault
    - Azure Key Vault (Switzerland regions)
    - Kubernetes External Secrets Operator
    
    ### Monitoring Secret Health
    
    - Certificate expiry monitoring (30 days notice)
    - API key rotation alerts
    - Failed authentication monitoring
    - Compliance audit logs
    
    ### Emergency Procedures
    
    1. **Compromised Secret**: Immediately rotate in external system
    2. **Certificate Expiry**: Emergency renewal process
    3. **API Key Limits**: Fallback key activation
    4. **Swiss Authority Contact**: DPO notification required
  
  swiss-compliance-checklist.md: |
    # Swiss Compliance Checklist for Secrets
    
    ## ‚úÖ DSGVO/DSG Requirements
    
    - [ ] Data encryption at rest and in transit
    - [ ] Access logging for all secret operations
    - [ ] Data residency in Switzerland/EU
    - [ ] Right to erasure implementation
    - [ ] Data breach notification procedures
    - [ ] DPO contact information updated
    
    ## ‚úÖ Technical Security
    
    - [ ] Secrets stored in encrypted storage
    - [ ] Network policies restrict access
    - [ ] RBAC controls implemented
    - [ ] Regular secret rotation (90 days)
    - [ ] Monitoring and alerting active
    - [ ] Backup encryption verified
    
    ## ‚úÖ Operational Security
    
    - [ ] Secret rotation procedures documented
    - [ ] Emergency contact list updated
    - [ ] Incident response plan tested
    - [ ] Staff security training completed
    - [ ] Third-party audit completed
    - [ ] Insurance coverage verified