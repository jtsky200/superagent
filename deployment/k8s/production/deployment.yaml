# ðŸš€ CADILLAC EV CIS - Production Kubernetes Deployments
# High-availability deployments for Swiss market

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cadillac-ev-backend
  namespace: cadillac-ev-production
  labels:
    app: cadillac-ev-backend
    component: backend
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cadillac-ev-backend
  template:
    metadata:
      labels:
        app: cadillac-ev-backend
        component: backend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: cadillac-ev-backend-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: ghcr.io/cadillac-ev-cis/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: NODE_ENV
        - name: PORT
          value: "3001"
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: DB_NAME
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: DB_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: REDIS_PORT
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: JWT_SECRET
        - name: JWT_REFRESH_SECRET
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: JWT_REFRESH_SECRET
        - name: JWT_EXPIRES_IN
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: JWT_EXPIRES_IN
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      imagePullSecrets:
      - name: cadillac-ev-registry-secret
      terminationGracePeriodSeconds: 60

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cadillac-ev-frontend
  namespace: cadillac-ev-production
  labels:
    app: cadillac-ev-frontend
    component: frontend
    version: v1.0.0
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cadillac-ev-frontend
  template:
    metadata:
      labels:
        app: cadillac-ev-frontend
        component: frontend
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      serviceAccountName: cadillac-ev-frontend-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: frontend
        image: ghcr.io/cadillac-ev-cis/frontend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: NODE_ENV
        - name: PORT
          value: "3000"
        - name: API_BASE_URL
          value: "http://cadillac-ev-backend:3001"
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: JWT_SECRET
        - name: NEXTAUTH_URL
          value: "https://cadillac-ev-cis.ch"
        - name: NEXT_TELEMETRY_DISABLED
          value: "1"
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: nextjs-cache
          mountPath: /.next/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: nextjs-cache
        emptyDir: {}
      imagePullSecrets:
      - name: cadillac-ev-registry-secret
      terminationGracePeriodSeconds: 60

---
# AI Services Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cadillac-ev-ai
  namespace: cadillac-ev-production
  labels:
    app: cadillac-ev-ai
    component: ai-services
    version: v1.0.0
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cadillac-ev-ai
  template:
    metadata:
      labels:
        app: cadillac-ev-ai
        component: ai-services
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: cadillac-ev-ai-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: ai-services
        image: ghcr.io/cadillac-ev-cis/ai-services:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
        env:
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: ai-services-config
              key: FLASK_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ai-services-config
              key: LOG_LEVEL
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: REDIS_PORT
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: OPENAI_API_KEY
        - name: DEEPSEEK_API_KEY
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: DEEPSEEK_API_KEY
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: GEMINI_API_KEY
        - name: SERPER_API_KEY
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: SERPER_API_KEY
        - name: FIRECRAWL_API_KEY
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: FIRECRAWL_API_KEY
        - name: QDRANT_API_KEY
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: QDRANT_API_KEY
        - name: DEFAULT_LANGUAGE
          valueFrom:
            configMapKeyRef:
              name: ai-services-config
              key: DEFAULT_LANGUAGE
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: cache
          mountPath: /app/cache
        - name: models
          mountPath: /app/models
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      - name: models
        emptyDir:
          sizeLimit: 2Gi
      imagePullSecrets:
      - name: cadillac-ev-registry-secret
      terminationGracePeriodSeconds: 120

---
# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cadillac-ev-postgres
  namespace: cadillac-ev-production
  labels:
    app: cadillac-ev-postgres
    component: database
    version: v15.0.0
    environment: production
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: cadillac-ev-postgres
  template:
    metadata:
      labels:
        app: cadillac-ev-postgres
        component: database
        version: v15.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: DB_NAME
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: DB_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: DB_PASSWORD
        - name: POSTGRES_INITDB_ARGS
          value: "--locale=de_CH.UTF-8 --encoding=UTF8"
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1Gi"
            cpu: "800m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: DB_USERNAME
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cadillac-ev-secrets
              key: DB_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: cadillac-ev-config
              key: DB_NAME
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts

---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cadillac-ev-redis
  namespace: cadillac-ev-production
  labels:
    app: cadillac-ev-redis
    component: cache
    version: v7.0.0
    environment: production
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: cadillac-ev-redis
  template:
    metadata:
      labels:
        app: cadillac-ev-redis
        component: cache
        version: v7.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        command:
        - redis-server
        - /etc/redis/redis.conf
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis/redis.conf
          subPath: redis.conf
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://localhost:6379"
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-data-pvc
      - name: redis-config
        configMap:
          name: redis-config

---
# Nginx Reverse Proxy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cadillac-ev-nginx
  namespace: cadillac-ev-production
  labels:
    app: cadillac-ev-nginx
    component: proxy
    version: v1.24.0
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cadillac-ev-nginx
  template:
    metadata:
      labels:
        app: cadillac-ev-nginx
        component: proxy
        version: v1.24.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: ssl-certs
          mountPath: /etc/nginx/ssl
          readOnly: true
        - name: logs
          mountPath: /var/log/nginx
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:latest
        ports:
        - containerPort: 9113
          name: metrics
        args:
        - -nginx.scrape-uri=http://localhost:8080/nginx_status
        resources:
          requests:
            memory: "16Mi"
            cpu: "10m"
          limits:
            memory: "32Mi"
            cpu: "25m"
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: ssl-certs
        secret:
          secretName: cadillac-ev-tls
      - name: logs
        emptyDir: {}